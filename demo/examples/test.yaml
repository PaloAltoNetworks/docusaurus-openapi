openapi: 3.0.0
servers:
  - url: https://docusaurus-openapi.tryingpan.dev/
    description: Default server
info:
  description: |
    For testing new changes with unique specification examples

  version: 1.0.0
  title: Testing APIs IoT
  contact:
    name: API Support
    url: https://github.com/PaloAltoNetworks/docusaurus-openapi-docs
tags:
  - name: Trash Panda
    description: Everything about Trash Pandas
  - name: Not Trash Panda
    description: Everything not about Trash Pandas

paths:
  /trash-panda/{tpId}:
    parameters:
      - name: Accept-Language
        in: header
        description: "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US"
        example: en-US
        required: false
        schema:
          type: string
          default: en-AU
      - name: cookieParam
        in: cookie
        description: Some cookie
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Trash Panda
      summary: Find your Trash Panda
      description: Returns a single Trash Panda. Used to test different content types in non 200 respones which should be in requests.
      operationId: getTPById
      parameters:
        - name: tpId
          in: path
          description: ID of Trash Panda to return
          required: true
          deprecated: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TP"
        "400":
          description: Invalid ID supplied
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/TP"
        "404":
          description: TP not found
      security:
        - api_key: []
components:
  schemas:
    TrashPanda:
      title: trash panda
      description: A representation of a TrashPanda
      allOf:
        - $ref: "#/components/schemas/TP"
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The environment for trash hunting
              default: dumpster
              example: trash can
              enum:
                - dumpster
                - trash can
                - bin
                - fine restaurants
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Id:
      type: integer
      format: int64
      readOnly: true
    TP:
      title: TP
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: TPType
        mapping:
          tp: "#/components/schemas/TrashPanda"
          dog: "#/components/schemas/Dog"
          bee: "#/components/schemas/HoneyBee"
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: TP ID
          allOf:
            - $ref: "#/components/schemas/Id"
        category:
          description: Categories this TP belongs to
          allOf:
            - $ref: "#/components/schemas/Category"
        name:
          description: The name given to a TP
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring TP
          type: array
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: "#/components/schemas/TP"
        tags:
          description: Tags attached to the TP
          type: array
          minItems: 1
          xml:
            name: tag
            wrapped: true
        status:
          type: string
          description: TP status in the store
          enum:
            - available
            - pending
            - sold
        TPType:
          description: Type of a TP
          type: string
          oneOf:
            - $ref: "#/components/schemas/TrashPanda"
      xml:
        name: TP

  securitySchemes:
    TPstore_auth:
      description: |
        Get access to data while protecting your account credentials.
        OAuth2 is also a safer and more secure way to give you access.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://TPstore.swagger.io/api/oauth/dialog"
          scopes:
            "write:TPs": modify TPs in your account
            "read:TPs": read your TPs
    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: api_key
      in: header
